{
	A simple type manager
}
program stacktype;				{ Version 1.3 }
const stackmax = 10;
type stack = record				{ stack of integers }
	stktop: 0..stackmax;
	stkdata: array [0..stackmax] of integer;{ element 0 is never used }
	end;
{
	Push
}
procedure push(var s: stack;			{ stack }
	       item: integer);			{ item to push }
entry
    defined(s.stktop);
    s.stktop >= 0;
    s.stktop < stackmax;      
exit
    defined(s.stktop);
    s.stktop = s.stktop.old + 1;
    s.stktop > 0;
    s.stktop <= stackmax;
    defined(s.stkdata[s.stktop]);
var lev: 1..stackmax;				{ working index }
begin
    lev := s.stktop + 1;			{ new item loc }
    s.stkdata[lev] := item;			{ insert new item }
    s.stktop := lev;				{ update depth }
end {push};
{
	Pop
}
procedure pop(var s: stack;			{ stack }
	      var item: integer);		{ item returned }
var lev: 0..stackmax;				{ working index }
exit  
    defined(s.stktop);
    s.stktop >= 0;
    s.stktop < stackmax;      
    s.stktop = s.stktop.old - 1;
    defined(item);
entry
    defined(s.stktop);
    s.stktop > 0;
    s.stktop <= stackmax;
    defined(s.stkdata[s.stktop]);
begin
    lev := s.stktop;				{ top level }
    item := s.stkdata[lev];			{ return top item }
    s.stktop := lev - 1;			{ update depth }
end {pop};
{
	Initstack
}
procedure initstack(var s: stack);		{ stack to be cleared }
exit defined(s.stktop);
     s.stktop = 0;
begin
    s.stktop := 0;				{ clear }
end {initstack};
{
	Test procedure

	Does various pushes, pops, and initstacks.
}
procedure test;
var stk1, stk2: stack;
    n: integer;
begin
    initstack(stk1);
    n := 25;
    push(stk1,n);
    initstack(stk2);
    pop(stk1,n);
    push(stk2,n);
    pop(stk2,n);
end {test};
begin {main}
end.
