{
	Definedness test  --  difficult cases
}
program defnd;
const bufsize = 100;				{ size of each buffer }
      buffers = 20;				{ number of buffers }
type bufix = 1..bufsize;
     bufnum = 1..buffers;
type buf = record				{ circular buffer }
	bufstart: bufix;			{ next data }
	bufend: bufix;				{ end data }
	bufcount: 0..bufsize;			{ count of data }
	buffer: array [bufix] of char;		{ data itself }
	end;
     buftab = array [1..buffers] of buf;
var b: buftab;					{ the buffers }
var i: bufnum;
{
	initialization
}
{
	initbuffer  --  initializes one buffer
}
procedure initbuffer(var bf: buf);		{ buffer to init }
exit defined(bf);				{ at exit, this row defined }
var j: bufix;
begin
    with bf do begin				{ for this buffer }
        for j := 1 to bufsize do begin
	    buffer[j] := ' ';			{ clear to spaces }
	    assert(defined(buffer,1,j-1));	{ still defined to j-1 }
	    state(defined(i), defined(j),
		  defined(buffer,1,j));
	    end;
	assert(defined(buffer));		{ buffer now defined }
	bufstart := 1;				{ clear start position }
	bufend := 1;				{ clear end position }
	bufcount := 0;				{ clear count }
	end;					{ of With }
end {initbuffer};
{
	main program
}
begin
for i := 1 to buffers do begin			{ for all buffers }
    initbuffer(b[i]);				{ init this buffer }
    assert(defined(b,1,i-1));			{ still defined }
    state(defined(i),
	  defined(b,1,i));
    end;
    assert(defined(b));				{ a very strong statement }
end.
