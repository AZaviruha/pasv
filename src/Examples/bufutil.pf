program bufutil;
{
	Circular Buffering Module	Version 1.2 of 1/14/83
}
monitor buflib priority 5;
exports bufget, bufput, bufinit, buffer;
const bufsize = 20;
type  bufindex = 1..20;			{ position in buffer }
      bufarray = array [bufindex] of char;
      buffer = record			{ buffer structure }
	bufin: bufindex;		{ next position to insert }
	bufout: bufindex;		{ next position to read }
	bufcount: 0..bufsize;		{ chars in buffer }
	buf: bufarray;			{ the buffer itself }
	end;
{
	bufvalid  --  buffer valid predicate
}
proof function bufvalid(b: buffer): boolean;
invariant defined(b);			{ the buffer is always defined }
					{ buffer sanity }
	((b.bufout + b.bufcount) = b.bufin)
	or
	((b.bufout + b.bufcount - bufsize) = b.bufin);
begin
end {bufvalid};
{
	bufput  --  put in buffer
}
function bufput(var b: buffer;		{ the buffer }
		ch: char)		{ char to insert }
		: boolean;		{ returns true if insert OK }
invariant bufvalid(b);			{ buffer remains valid }
begin
    if b.bufcount < bufsize then begin	{ if buffer not full }
	b.bufcount := b.bufcount + 1;	{ increment buffer count }
	b.buf[b.bufin] := ch;		{ store char in buffer }
	assert(defined(b.buf,1,bufsize));{ array still defined }
	if b.bufin = bufsize then	{ if at max }
	    b.bufin := 1		{ reset to start }
	else b.bufin := b.bufin + 1;	{ otherwise increment }
        bufput := true;			{ success }
    end else begin			{ if full }
	bufput := false;		{ insert fails }
	end;
end {bufput};
{
	bufget  --  get from buffer
}
function bufget(var b: buffer;		{ the buffer }
		var ch: char)		{ char returned }
	: boolean;			{ true if successful }
invariant bufvalid(b);			{ buffer remains valid }
exit return implies defined(ch);	{ char only if not empty }
begin
    if b.bufcount > 0 then begin	{ if buffer not empty }
	b.bufcount := b.bufcount - 1;	{ decrement buffer count }
	assert(defined(b));	        { still all defined }
	ch := b.buf[b.bufout];		{ get char from buffer }
	if b.bufout = bufsize then	{ if at max }
	    b.bufout := 1		{ reset to start }
	else b.bufout := b.bufout + 1;	{ otherwise increment }
	bufget := true;			{ success }
    end else bufget := false;		{ fails if empty }
end {bufget};
{
	bufinit -- buffer initialization
}
procedure bufinit(var b: buffer);	{ buffer to be initialized }
exit bufvalid(b);			{ valid at exit }
var i: bufindex;
begin
    for i := 1 to 20 do begin 		{ clear to spaces }
	b.buf[i] := ' '; 
	assert(defined(b.buf,1,i-1));	{ still defined up to i-1 }
	state(defined(i),
	      defined(b.buf,1,i));
	end;
    b.bufout := 1;			{ start at 1 }
    b.bufin := 1;			{ end at 1 }
    b.bufcount := 0;			{ length 0 }
end {buflib}
begin {buflib}
end {bufutil};
var stat: boolean;			{ status from routines above }
    ch: char;				{ working char }
var b: buffer;				{ the buffer }
begin {main}
    bufinit(b);				{ initialize the buffer }
    init bufutil;
    stat := bufput('x');
    stat := bufget(ch);			{ get a char }
    if stat then begin			{ if we got a char }
	end;
end.
