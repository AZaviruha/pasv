program bubble;{	The Bubble Sort  --  A Classic Verification Example}const lim = 100;      maxint = 32767;			{ max cardinal }type tableix = 0..lim;     cardinal = 0..maxint;     table = array [tableix] of cardinal;{	Rule functions}rule function ordered(a: table; i: tableix; j: tableix): boolean; begin end;rule function arraymin(a: table; i: tableix; j: tableix): cardinal; begin end;rule function arraymax(a: table; i: tableix; j: tableix): cardinal; begin end;{	sort  --  sort array, returning sorted array}procedure sort(a: table);var i,j: tableix;				{ loop indices }    t: cardinal;				{ holder for swap }begin    for i := lim downto 1 do begin		{ outer loop }	state(defined(i),			{ outer invariant }	      ordered(a,i,lim),	      (i < lim) implies (arraymax(a,0,i) <= arraymin(a,i+1,lim)));	for j := 0 to i - 1 do begin		{ inner loop }	    state(defined(i), defined(j),	{ inner invariant }		ordered(a,i,lim),		(i < lim) implies (arraymax(a,0,i) <= arraymin(a,i+1,lim)),		(j > 0) implies (arraymax(a,0,j-1) <= a[j]));	    if a[j] > a[j+1] then begin		{ if out of order }		t := a[j];			{ swap }		a[j] := a[j+1];		assert((i < lim) implies (arraymax(a,0,i) 			<= arraymin(a,i+1,lim)));		assert(ordered(a,i,lim));	{ ordered not destroyed }		assert(ordered(a,i+1,lim));	{ ordered still true within }		a[j+1] := t;		assert(ordered(a,i+1,lim));	{ ordered still true within }						{ cases }		assert(not (j > (i - 1)));	{ not wrong way }		assert((j = (i - 1)) implies (ordered(a,i,lim)));		assert((j < (i - 1)) implies (ordered(a,i,lim)));		assert(ordered(a,i,lim));	{ ordered still holds }		end;	    end;				{ end inner loop }	    assert(ordered(a,i,lim));		{ ordered not destroyed }	    assert(a[i-1] <= a[i]);		{ ordered at a[i] }	end;					{ end outer loop }end {sort};{dummy main}begin end.