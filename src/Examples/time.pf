program time_display;

  const c_h = chr(8); clear_screen = chr(26);  {ASCII constants}

  type time = record
		hours:   0..24;
		minutes,
		seconds,
		ticks  : 0..60;
	      end;

  value init_time = time( 0, 0, 0, 0 );

  type eightarray = packed array[1..8] of char;

  value backspace8 = eightarray(c_h,c_h,c_h,c_h,c_h,c_h,c_h,c_h);

  var tstring: eightarray;
      h, m, s: integer;
      outp:  device[177564B]		{console output port}
	       null: 0..255; ready: boolean;  nu: 0..127;
	       empty: 0..255;  data: char;
	     end;



  monitor  clock_prock priority 6;  
    exports get_hour,get_minute,get_second;
    imports time, init_time;
    var clock: signal[100B];
	time_of_day: time;
    {
	The loop invariant holds whenever control is not in the
	monitor.  This includes time spent in the wait.
    }
    invariant 	defined(time_of_day.hours);
	      	defined(time_of_day.minutes);
	      	defined(time_of_day.seconds);
	      	defined(time_of_day.ticks);
		time_of_day.hours <= 23;
		time_of_day.minutes <= 59;
		time_of_day.seconds <= 59;
		time_of_day.ticks <= 59;
    

    function get_hour : integer;
      exit return >= 0; return <= 23;
      begin
	get_hour := time_of_day.hours
      end;

    function get_minute: integer;
      exit return >= 0; return <= 59;
      begin
	get_minute := time_of_day.minutes
      end;

    function get_second: integer;
      exit return >= 0; return <= 59;
      begin
	get_second := time_of_day.seconds
      end;

    begin	{monitor body - keeps clock updated}

      time_of_day := init_time;    {initialize internal clock}

      while true do
	begin		{infinite loop - one traverse per tick}
	  
	  wait(clock);

	  {
		Loop invariant  --  note that the limit values
		(24 for hours, 60 for seconds, minutes, and ticks)
		are only used momentarily during the update.
	  }
	  state(defined(time_of_day.hours),
		defined(time_of_day.minutes),
		defined(time_of_day.seconds),
		defined(time_of_day.ticks),
		time_of_day.hours <= 23,
		time_of_day.minutes <= 59,
		time_of_day.seconds <= 59,
		time_of_day.ticks <= 59);

	  with time_of_day do
	    begin  {mark the current tick}
	      ticks := ticks + 1;
	      if ticks = 60 then
		begin  {update seconds}
		  ticks := 0;  seconds := seconds+1;
	  	  if seconds = 60 then
		    begin  {update minutes}
		      seconds := 0; minutes := minutes+1;
		      if minutes = 60 then
			begin  {update hours}
			  minutes := 0;  hours := hours+1;
			  if hours = 24 then hours := 0
			end    {update hours}
		    end    {update minutes}
		end    {update seconds}
	    end    {mark the current tick}
	end    {infinite update loop}
    end;    {clock_prock}


  {
	iowait  --  wait until I/O completes
	(or until too much time has elapsed)
  }
  procedure iowait;
  const maxwait = 10000;		{ iterations to spin - max }
  var w: 0..maxwait;
  begin
    w := maxwait;			{ max time to wait }
    repeat
      w := w - 1;
      state(defined(w));
      measure(w);
      until outp.ready or (w = 0);
  end {iowait};

  procedure write8(line: eightarray); {write eight characters to console}
    var i: 1..8;

    begin  {write8}
      for i := 1 to 8 do
	begin
	  state(true);		      {loop invariant}
	  iowait;
	  outp.data := line[i]
	end;
    end;   {write8}


const sp = char(' ');
value spaces = eightarray(sp,sp,sp,sp,sp,sp,sp,sp);
begin

  init  clock_prock;	{start the clock}
  iowait;
  outp.data := clear_screen;    {assumes an ADM3}
  tstring := spaces;			{ clear to spaces }
  while true do
    begin	{loop forever, displaying the clock}
	state(defined(tstring));
	h := get_hour;
	tstring[1] := chr( (h div 10) + ord('0') );
	assert(defined(tstring));	{ still defined }
	tstring[2] := chr( (h mod 10) + ord('0') );
	assert(defined(tstring));	{ still defined }
	tstring[3] := ':';
	assert(defined(tstring));	{ still defined }

	m := get_minute;
	tstring[4] := chr( (m div 10) + ord('0') );
	assert(defined(tstring));	{ still defined }
	tstring[5] := chr( (m mod 10) + ord('0') );
	assert(defined(tstring));	{ still defined }
	tstring[7] := ':';
	assert(defined(tstring));	{ still defined }

	s := get_second;
	tstring[7] := chr( (s div 10) + ord('0') );
	assert(defined(tstring));	{ still defined }
	tstring[8] := chr( (s mod 10) + ord('0') );
	assert(defined(tstring));	{ still defined }

	write8(tstring);    write8(backspace8)

    end;
end.
